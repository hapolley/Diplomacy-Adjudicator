'[code Descriptive Outline]
'02040608101214161820222426283032343638404244464850525456586062646668707274767880
' Note: Just Basic / Liberty Basic Code Front is Western Courier New regular 10
'       We try to keep CODE Lines under 80 by using the underscore. This allows
' other reference windows; [AA_Spell_Quotes.log.TXT]; to be used while Coding.
' ____________________________________________________________________________
'/ Basic Editor and Spell AID FOR QUOTE REMARKS AND QUOTE OUTPUT              \
'| 1. Hugh Polley   2020/02/17                                                 |
'|                                                                             |
'| This code is to be considered "public domain".' Feel free to do what you    |
'| want with it. If you come with an improvement please post it here so all    |
'| Basic users get the benefit.                                                |
'| If you make changes to the CODE add your name and date to above listing!    |
'|                                                                             |
'| Disclaimer:                                                                 |
'| This code is provided as-is and it does not have any warranty of any kind.  |
'| User is responsible for any misuse of the code. Do not use this code in     |
'| whole or in part if you can not accept these terms!                         |
' \___________________________________________________________________________/
'
'  ___________________________________________________________________________
'/PURPOSE: Spelling is not my forte, it is very difficult to check the        \
'|spelling in a programming Language's quotes and remarks. This program takes  |
'|care of that problem by seperating out the Quote and Remarks into a Text     |
'|file which can be put into one of the many editors out there such as         |
'|LibreOffice.  After the spell check and any desired editing, the second      |
'|half of the program returns the code to its orginal location in the program. |
'|Note: you can not add lines into the spell check text.txt.                   |
' \___________________________________________________________________________/
'
'  ___________________________________________________________________________
' /     MY PAST PROGRAMS HAVE USED ONE OR MORE OF THESE METHODS               \
'| NOTE: To Accomplish (1-10) run program again as required after each Step    |
'|01. Set [InFile$=PB_file] with (.BAS)] extension                             |
'|02. Allow Program to Create a [!CONVERT] sub directory!                      |
'|03. Place a copy of the [InFile$ .BAS] Program code in [!CONVERT] directory  |
'|04. Program will create an Execution LOG in CONVERT [AB-Spell Edit-Log.TXT]  |
'|05. Program Creates [AA-Scaned Code.txt] for last update to converted File!  |
'|    NOTE: control what is executed by deleting records from bottom to top!   |
'|>>> Program does the following:                                              |
'|06. Remove Remarks by replacing them with [:REMARK=#####] TO SPELLremarks.TXT|
'|07. Remove Quotes by replacing them with [Quote$(#####)] to SPELLquotes.TXT  |
'|18. For each Procedure File Syntax Change Scaned$ = Fixed$, Fixed$=new fix   |
'|    [OPEN Fixed$ FOR OUTPUT] and [OPEN Scaned$ FOR INPUT]                    |
'|19. The program allows you to Exit and Spell check the files before proceding|
'|10. to place the Remarks and Quotes back into InFile$                        |
' \___________________________________________________________________________/
'______________________________________________________________________________|
on error goto [ErrorHandler]
'============================
GLOBAL InFile$,CONTROL$,CONVERT$,Fixed$,Scaned$,Record$,FileIn$
GLOBAL Structure,Syntax,Found,Place,SUBOFF,Skip,Ln
GLOBAL f1,f2,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13,f14 'open file values
'______________________________________________________________________________|
[NAME.of.BAS.file.TO.be.Checked]
' _______________________________________________________________________
'/                                                                       \
    InFile$="PB_Lotto_Pool.bas"   '<<< Place nane of file to be Converted |
'\_________________GLOBAL SETTINGS________________________________________/

    Ln=1: Skip=0: Found=0: Place=5'changable Size of Ref Number
    f1=1: f2=2: f4=4: f5=5: f6=6: f7=7: f8=8: f9=9: f10=10
    f11=11: f12=12: f13=13: f14=14: f15=15   'Open File numbers
'______________________________________________________________________________|
[OUTPUTsettingsFORfilesANDlines] Skip=0
Err$="[OUTPUTsettingsFORfilesANDlines]<"+str$(Skip)+">"
Er1$=Err$
    CONVERT$="!CONVERT\"
    CLS: print Err$
    print
    print "< In Translation Code, is [InFile$="+InFile$+"] Correct? >"
    input "If Yes, HIT ENTER, else Close Window!";X$
    print
'______________________________________________________________________________|
[DOESsubdirectory!CONVERTexist] Skip=Skip+1
Err$="[DOESsubdirectory!CONVERTexist]<"+str$(Skip)+">"
Er2$=Err$
print Err$
    result = mkdir( "!CONVERT")
    if result <> 0 then
        print "|_________________________________________________|"
        print "| [!CONVERT] directory EXISTS!                    |"
        print "| Working Directory for Translation Files !       |"
        print "|-------------------------------------------------|"
        print "<PLACE [";InFile$;"] into [!CONVERT] DIRECTORY!>"
        print "|_________________________________________________|"
        print
    else
        print "|_________________________________________________|"
        print "| [!CONVERT] directory CREATED!                   |"
        print "| Working Directory for Translation Files !       |"
        print "| Place ?InFile?.BAS into Directory               |"
        print "|-------------------------------------------------|"
        print "<PLACE [";InFile$;"] into [!CONVERT] DIRECTORY!>"
        print "|_________________________________________________|"
        print
        Err$=" {{ RUN JB Program Again! }}"
        goto [ErrorHandler]
    end if
'______________________________________________________________________________|
[in!CONVERTfindLAST.bas] Skip=Skip+1
Err$="[in!CONVERTfindLAST.bas]<"+str$(Skip)+">"
Er3$=Err$
print Err$
    dim info$(1,1)              'is redimed by Files
    F$=DefaultDir$+"\"+CONVERT$ 'Conversion Folder
    files F$,info$()            'list folder files into Info$
    if val(info$(0,0))=0 then
    '__________________________ 'a string specifying the qty of files found
        Err$="<"+Err$+" <Empty!>>"
        print "|_________________________________________________|"
        print "| [!CONVERT] directory EXISTS!                    |"
        print "| In Program's Code is <InFile$> set to <??.BAS>  |"
        print "|-------------------------------------------------|"
        print "<PLACE [";InFile$;"] into [!CONVERT] DIRECTORY!>"
        Err$="{{ RUN JB Program Again! }}"
        goto [ErrorHandler]
    '_______________________________________________________________________
    end if
    '_Is_File_to_be_checked_in_CONVERT$?____________________________________
    Nm=val(info$(0,0))
    for X=1 to Nm
        if upper$(info$(X,0))=upper$(InFile$) then exit for
    next X
    if X>Nm then
        cls
        print
        print "InFile$=[";InFile$;"] Not Found in Folder [";CONVERT$;"]"
        print
        goto [ErrorHandler]
    end if

'_____________________________________________________________________________|
[CHECKforLASTcompletedCODEscan] Skip=Skip+1
Err$="[CHECKforLASTcompletedCODEscan]<"+str$(Skip)+">"
print Err$
Er4$=Err$
    if Nm=1 then 'one file in CONVERT$
        open CONVERT$+"AA-Scaned Code.txt" for output as #f2
            print #f2,InFile$
        close #f2
    end if
    ' ______________________________________________________________
    '/Files Translated by Just Basic Code                           \
     open CONVERT$+"AA-Scaned Code.txt" for append as #f3: close #f3
     open CONVERT$+"AA-Scaned Code.txt" for input as #f3
    '\______________________________________________________________/
        Found=0'number of files found used to avoid translating more than needed
        Fixed$="" 'will hold last record in file for procedure Found>skip?
        '____________________________________________________________
        do until eof(#f3)
            input #f3,X$ 
            if len(trim$(X$))>0 then Fixed$=X$: Found=Found+1
        loop
        '-----------------------------------------------------------
     close #f3
     '\___________________________________________________________/
'______________________________________________________________________________|
[CLEARandCREATElogfile]  Skip=Skip+1
Err$="[CLEARandCREATElogfile]<"+str$(Skip)+">"
print Err$
    ' ___________________________________________________
    '/Create procedure Log File                          \
    open CONVERT$+"AB-Spell Edit-Log.TXT" for output as #f1
    '\___________________________________________________/
        PRINT #f1,"<"+InFile$+">"
        print #f1,space$(Ln)+"M "+Er1$
        print #f1,space$(Ln)+"M "+Er2$
        print #f1,space$(Ln)+"M "+Er3$
        print #f1,space$(Ln)+"M "+Er4$
    close #f1
    '\___________________________________________________/
    call logit "M "+Err$ 'Line Indent
Skip=0
' _____________________________________________________________________________
'/From this point on Found is used to pass over already completed changes Skip!\
'|At this point in Code Skip is = 0, Mess with above Code at your own Risk!     |
print "Decreasing number for each adjustment < -- >"
'\_____________________________________________________________________________/
'______________________________________________________________________________|
[REMOVEremarksTOspell] Skip=Skip+1
Err$="[REMOVEremarksTOspell]<"+str$(Found-Skip)+">"
call logit "M "+Err$
print Err$
If Found>Skip then
   GOTO [REMOVEquotesTOspell] 'skip to
end if
    ' _________________________________________
    '/SETUP Variables                          \
        SUBOFF=0
        REMARK=0
        Scaned$=Fixed$
        Fixed$=InFile$+".Remark.basJ"
    '\_________________________________________/
    ' ______________________________________________________
    '/OPEN Files for input and Output                       \
        open CONVERT$+"YY_Spell Remarks.TXT" for OUTPUT as #f4
        open CONVERT$+Fixed$ for OUTPUT as #f6
        open CONVERT$+Scaned$ for INPUT as #f5
    '\______________________________________________________/

   ' ________________
   '/                \
    do until EOF(#f5)
        line input #f5, xx$
        REMARK=REMARK+1: Remarkit$="0000000"+str$(REMARK)
        Remarkit$=right$(Remarkit$,Place)
        '----------------------------------------------
        if left$(trim$(xx$),1)="'" then 'line Remark found
            print #f4, Remarkit$+space$(2)+trim$(xx$)
            print #f6," REMARK="+trim$(Remarkit$)
        else
            Z=1: Quote$=""
           ' ____________
           '/            \
            do until Z=0
                Z = INSTR(xx$,"'",Z)
                '----------------
                if Z=0 then
                    print #f6,xx$ 
                    exit do '----------->
                end if
                '-----------------
                InQuote=InsideQuotes(xx$,Z) 'byref xx$ unclosed quotes closed
                '----------------------------------------
                if InQuote>Z then 'REM inside a quote
                    Z=InQuote '-------------------------------->
                else 'store Remark
                    yy$=trim$(mid$(xx$,Z))
                    xx$=Left$(xx$,Z-1)
                    print #f4, Remarkit$+space$(2)+trim$(yy$)
                    print #f6,xx$+" : REMARK="+trim$(Remarkit$)
                    exit do '---------------------------------->
                end if
            loop
            '\____________/

        end if
        '---------------------------------------------------
    loop
   '\________________/
   ' _________________
   '/Close OPEN Files \
        close #f6
        close #f5
        close #f4
   '\________________/

' __________________________________________________
'/AVE LAST OUTPUT FILE TO CONTROLING TEXT FILE      \
   call Record.Repaired.Code
'\__________________________________________________/
Err$="{{ RUN JB Program Again! }}"
goto [ErrorHandler]
'______________________________________________________________________________|
[REMOVEquotesTOspell]  Skip=Skip+1
Err$="[REMOVEquotesTOspell]<"+str$(Found-Skip)+">"
print Err$
    If Found>Skip then
        GOTO [RETURNspellCHECKEDlines] 'skip to
    end if
    ' _________________________________________
    '/SETUP Variables                          \
        SUBOFF=0
        Quote=0
        Quote$="Quote$(??)"
        Scaned$=Fixed$
        Fixed$=InFile$+".Quote.basJ"
    '\_________________________________________/

   ' ______________________________________________________
    '/OPEN Files for input and Output                       \
        open CONVERT$+"XX-Spell Quotes.TXT" for OUTPUT as #f9
        open CONVERT$+Fixed$ for OUTPUT as #f7
        open CONVERT$+Scaned$ for INPUT as #f8
    '\______________________________________________________/
   ' ________________
   '/                \
    Quote=0
    do until EOF(#f8)
        line input #f8, xx$
        '----------------------------------------------
        if left$(trim$(xx$),1)="'" then 'line Remark found
            print #f7,xx$
        else
           ' ________________
           '/                \
            Z=1: do until Z=0
                Z = INSTR(xx$,chr$(34),Z) 'find quote
                '----------------
                if Z=0 then
                    print #f7,xx$ 
                    exit do '----------->
                end if
                Start=Z: Z=Z+1
                if ASC(mid$(xx$,Z,1))=34 then
                    Z=Z+1 'Double Quote ignore
                else
                    'position after Quote in xx$
                    '-----------------
                    InQuote=InsideQuotes(xx$,Z) 'byref xx$ unclosed quotes closed
                    '----------------------------------------
                    if InQuote>Z then 'Second Quote Found
                        Last=InQuote-1
                        Z=InQuote 'continue quote line check
                        Y1$=Left$(xx$,Start-1)
                        Y2$=mid$(xx$,Start+1,Last-Start-1)
                        Y3$=trim$(mid$(xx$,Last+1))
                        yy$=Y2$
                        Quote=Quote+1: Quote$="000000"+str$(Quote)
                        Quote$=right$(Quote$,5)
                        Y2$="Quote$("+str$(Quote)+") "
                        '-----------------------------------------
                        xx$=Y1$+Y2$: Z=len(xx$)+1 'Z reset to new val
                        '------------------------------------------
                        xx$=xx$+Y3$
                        print #f9,Quote$+space$(2)+trim$(yy$)
                        '-------------------------------->
                    else 'Code Problem?
                        cls
                        print "2"
                        print xx$
                        print InQuote,Z,mid$(xx$,Z,1)
                        print
                        input "hit";T$
                        call logit "ERROR Quote? "+xx$
                        print #f7,"[ERRORquote]"+xx$
                        Z=0
                    end if
                end if

            loop
            '\____________/

        end if
        '---------------------------------------------------
    loop
   '\________________/
   ' _________________
   '/Close OPEN Files \
        close #f7
        close #f8
        close #f9
   '\________________/
' __________________________________________________________________
'/                                                                  \
if  REMARK>Quote then Dim Record$(REMARK+1) else Dim Record$(Quote+1)
'\__________________________________________________________________/
' __________________________________________________
'/ AVE LAST OUTPUT FILE TO CONTROLING TEXT FILE     \
    call Record.Repaired.Code
'\__________________________________________________/

Err$="{{ RUN JB Program Again! }}"
goto [ErrorHandler]
'________________________________________________________________________________|
[RETURNspellCHECKEDlines]
print
print "Ready TO Return Code!"
input "Close Window if you have not finished Spell Checking!";X$
print
'________________________________________________________________________________|
[RETURNquotesTOcode] Skip=Skip+1
Err$="[RETURNquotesTOcode]<"+str$(Found-Skip)+">"
call logit "M "+Err$
print Err$
    If Found>Skip then
        GOTO [RETURNremarksTOcode] 'skip to
    end if
    ' _________________________________________
    '/SETUP Variables                          \
        SUBOFF=0
        Scaned$=Fixed$ 'last record in Scan Code
        Fixed$=InFile$+".ReturnedQ.basJ"
        FileIn$="XX-Spell Quotes.TXT"
    '\_________________________________________/

    call Return.Code.Quotes Scaned$,Fixed$,FileIn$
' __________________________________________________
'/AVE LAST OUTPUT FILE TO CONTROLING TEXT FILE      \
   call Record.Repaired.Code
'\__________________________________________________/
Err$="{{ RUN JB Program Again! }}"

    goto [ErrorHandler]
'_____________________________________________________
[RETURNremarksTOcode] Skip=Skip+1
Err$="[RETURNremarksTOcode]<"+str$(Found-Skip)+">"
call logit "M "+Err$
print Err$
     If Found>Skip then
        GOTO [SPELLcheckCOMPLETED] 'skip to
    end if

    ' _________________________________________
    '/SETUP Variables                          \
        SUBOFF=0
        Scaned$=Fixed$ 'last record in Scan Code
        Fixed$=InFile$+".ReturnedR.basJ"
        FileIn$="YY_Spell Remarks.TXT"
    '\_________________________________________/

    call Return.Code.Remarks Scaned$,Fixed$,FileIn$
' __________________________________________________
'/AVE LAST OUTPUT FILE TO CONTROLING TEXT FILE      \
   call Record.Repaired.Code
'\__________________________________________________/
Err$="{{ RUN JB Program Again! }}"

goto [ErrorHandler]

' ______________________________________________________
'/END OF REQUIRED OPERATIONS, REST OF TRANSLATIONS CAN  \
'|BE FOR EITHER PYTHON OR JUST BASIC, DO NOT RUN AS EXE |
'|IT IS CONSTRUCTED TO FIX CODE PROBLEMs AS ENCOUNTERED |
'|NEXT LOAD [B TranslatePB-jb.basJ] to Continue making  |
'|changes to the PB code. It will use AB_Scaned-Code.txt|
'|to capture the PB File Name.                          |
'========================================================
'______________________________________________________________________________|
[SPELLcheckCOMPLETED] 'final run will have Found>Skip
print "  ________________________________________________________________  "
print " / Run your program in ["+CONVERT$+"] to make sure all is OK!"
print "| Hope you backed up the File to be Spell Checked                   |"
print " \_________________________________________________________________/ "
' _____________________________
'/JB OUTPUT FILE CREATED       \
 Scaned$=Fixed$
 Fixed$=InFile$+"J"
' ______________________________________________________
'/OPEN Files for input and Output                       \
        open CONVERT$+Fixed$ for OUTPUT as #f1
        open CONVERT$+Scaned$ for INPUT as #f2
'\______________________________________________________/
       do until eof(#f2)
            line input #f2,X$ 
            print #f1,X$
        loop
'--------------------------------------------------------
     close #f2
     close #f1
'\_______ON WAY TO END_________/

'_________________________________________________________
[ErrorHandler] 'NOTIFICATION OF END OF EXECUTION OR ERROR \
'\__Place SUB OR FUNCTION CALLS here only when no error!__/

    if Err>0 then
        print
        print " ___________________________________________"
        print "/          ERROR MESSAGE                    "
        if Err$<>"" then print "{"+Err$+"}"
        print "Error number is {";Err;"}"
        print "\__________END OF MESSAGE___________________"
    else
        print
        print " ___________________________________________"
        print "/          LAST PROCEDURE                   "
        print " {"+Err$+"}"
        print "\___________OR MESSAGE______________________"

       if Found>Skip then
            Ln=1: call logit "M [END OF PROGRAM EXECUTION]"
        print " ___________________________________________"
        print "/          OUTPUTED FILE                   "
        print "   Program has Returned the Checked"
        print "   Code to Program ["+Fixed$+"]"
        print "\______________THE_END______________________"
        end if
    end if


' __________________________________________________________________
'/  PROPER END TO PROGRAM EXECUTION AND ERROR HANDLING              \
                    END                                             '|
'|  3 RETURN without GOSUB                                           |
'|  4 Read past end of data                                          |
'|  8 Branch label not found                                         |
'|  9 Subscript out of range                                         |
'|  11 Division by zero                                              |
'|  53 OS Error: The system cannot find the file specified.          |
'|  58 OS Error: Cannot create a file when that file already exists. |
'|  55 Error opening file                                            |
'|  52 Bad file handle                                               |
'|  62 Input past end of file                                        |
'|                                                                   |
'\____________START OF FUNCTIONS AND SUBROTINES______________________/
'__________________________________________________
sub Record.Repaired.Code 'Fixed,CONVERT$ are Global
' __________________________________________________
'/SAVE LAST OUTPUT FILE TO CONTROLING TEXT FILE     \
open CONVERT$+"AA-Scaned Code.txt" for append as #f12
    print #f12,Fixed$
close #f12
'\__________________________________________________/
end sub
'__________________________
[LOGtoCONTROLprocessedFILE]
sub logit itlog$
    open CONVERT$+"AB-Spell Edit-Log.TXT" for APPEND as #f13
        print #f13,space$(Ln)+itlog$
    close #f13
end sub
'_______________________
FUNCTION Ltrim$(String$)
    do
        if trim$(String$)="" then String$="": exit do
        If left$(String$,1)=space$(1) then String$=mid$(String$,2) else exit do
    loop until String$=Trim$(String$)
    Ltrim$=String$
end function
'_______________________
FUNCTION Rtrim$(String$)
    do
        if trim$(String$)="" then String$="": exit do
        If Right$(String$,1)=space$(1) then
            String$=mid$(String$,1,len(String$)-1)
        else
            exit do
        end if
    loop until String$=Trim$(String$)
    Rtrim$=String$
end function
'____________________________________
FUNCTION InsideQuotes(byref xx$,Z) 'closes open quotes
IF SUBOFF=0 THEN
Ln=L+4: call logit "F InsideQuotes(byref xx$,Z)": Ln=Ln-4
SUBOFF=1
END IF
     IF  Z = 0 THEN EXIT FUNCTION
      Y = 1 :  X = 1
     DO UNTIL  Y = 0
          Y = INSTR(xx$,CHR$(34), X)
         IF  Y > 0 THEN 'first quote found
              X =  Y + 1
              W = INSTR(xx$,CHR$(34), X)
             IF  W > 0 THEN 'closing quote found
                  X =  W + 1
                 IF  Z >  Y AND  Z <  W THEN 'return next position outside of quotes
                     InsideQuotes =  X
                     EXIT FUNCTION
                 END IF
             else 'closing Quote not found add Quote
                xx$= xx$+CHR$(34)
                 Y = 1: X = 1
             END IF
         END IF
     LOOP
END FUNCTION
'____________________________________
function RemoveLines$ (test$)
        while Remove$<>"End"
            read Remove$
            Z=instr(test$,Remove$)
            if Z>0 then  'un-needed line found
                open CONVERT$+InFile$+".LinesRemoved.basJ" for append as #12
                    print #12,test$
                close #12
                test$=""
                EXIT WHILE
            end if
        wend
        RemoveLines$=test$

[DATArestore]
    restore
    DATA " #CONSOLE ON "," #COMPILE EXE "," #REGISTER "," #DEBUG ERR "
    DATA " DEFLNG "," MACRO CONST ","End"

end function
'_______________________________________________
FUNCTION Search.For.Ref$(Ref$,LastRecord)
Err$="Search_For_Ref("+Ref$+")"
    Namey$=Ref$
    Namey=val(Ref$)

    TopRecord = 1
    BottomRecord = LastRecord
    do
        MidPoint = INT((TopRecord + BottomRecord) / 2)
        test = val(LEFT$(Record$(MidPoint),LEN(Namey$)))
        IF test = Namey THEN EXIT DO '---------------->
        IF Namey>test THEN
            TopRecord = MidPoint + 1
        ELSE
            BottomRecord = MidPoint - 1
        END IF
    LOOP UNTIL (TopRecord > BottomRecord)
      ' ______________________________________________________________________
      '/Found Record Set to value$ without Ref number                         \
        IF test = Namey THEN
            Search.For.Ref$=mid$(Record$(MidPoint),LEN(Namey$)+3)
        else
            Search.For.Ref$ ="No_Quote_Found"
        end if
      '\______________________________________________________________________/

END FUNCTION
'______________________________________________
sub Return.Code.Quotes Scaned$,Fixed$,FileIn$
Err$="Return.Code.Quotes Scaned$,Fixed$,FileIn$"
Ln=Ln+4: call logit "S "+Err$

    ' _________________________________________________________
    '/ Load Record$() with Quote Records                       \
    open CONVERT$+FileIn$ for input as #f14
        N=0: do until eof(#f14): line input #f14,T$: N=N+1: loop
    close #f14

    Redim  Record$(N+1)
    open CONVERT$+FileIn$ for input as #f15
        N=0
        do until eof(#f15)
            line input #f15,T$: N=N+1
            Record$(N)=T$
        loop
    close #f15
    '\_________________________________________________________/

    LastRecord=N
   ' ________________________________________________________
   '/Search for Quote = ref points                           \
    open CONVERT$+Fixed$ for output as #f11
    open CONVERT$+Scaned$ for Input as #f10
   '\________________________________________________________/
        EmptyLines=0: FoundPlace=0 'Place limit of ref number
        do until eof(#f10)
            line input #f10,xx$
            Q=1 'set so loop works
            do until Q=0
                Q=instr(xx$,"Quote$(",Q)
                if Q>0 then
                    S=Q+7 'start of ref #
                    R=instr(xx$,")",S)'end of number
                    P=R+1: R=R-1  'P right side of line, R end of number
                    RF=val(mid$(xx$,S,R-S+1)) 'ref value
                    Y1$=Left$(xx$,Q-1) 'left side of line
                    Y3$=mid$(xx$,P)    'right side of line
                    Namey$="0000000"+str$(RF)
                    Namey$=right$(Namey$,Place) 'place is length of Ref
                    Y2$=Search.For.Ref$(Namey$,LastRecord)
                    Q=S 'move search point just in case Y2$=""
                    if len(Y2$)>0 then
                        Y2$=chr$(34)+Y2$+chr$(34)
                        xx$=Y1$+Y2$
                        Q=len(xx$)
                        xx$=xx$+Y3$
                        QuotePlace=QuotePlace+1
                    else
                        EmptyQuotes=EmptyQuotes+1
                    end if
                end if
            loop
            print #f11,xx$
        loop
    ' _________________
    '/Close OPEN Files \
     close #f10
     close #f11
    '\_________________/
     if RemarkMissed>0 then print "Remarks Missed=";RemarkMissed
     Ln=Ln+4
     call logit "Quotes Missed=";EmptyQuotes
     call logit "Quotes Found=";QuotePlace
     Ln=Ln-8

end sub
'______________________________________________
sub Return.Code.Remarks Scaned$,Fixed$,FileIn$
Err$="Return.Code.Remarks Scaned$,Fixed$,FileIn$"
Ln=Ln+4: call logit "S "+Err$
    ' _________________________________________________________
    '/ How many records in Remark file                         \
    open CONVERT$+FileIn$ for input as #f14
        N=0: do until eof(#f14): line input #f14,T$: N=N+1: loop
    close #f14
    ' __________________________________________
    '/empty and size array for Search of Remarks\
            Redim  Record$(N+1)
    '\__________LOAD Record$()__________________/
    open CONVERT$+FileIn$ for input as #f15
        N=0
        do until eof(#f15)
            line input #f15,T$: N=N+1
            Record$(N)=T$
        loop
    close #f15
    '\_________________________________________________________/

    LastRecord=N 'number of records in array to be searched
   ' ________________________________________________________
   '/Search for Quote = ref points                           \
    open CONVERT$+Fixed$ for output as #f11
    open CONVERT$+Scaned$ for Input as #f10
   '\________________________________________________________/
        RemarkMissed=0: RemarkFound=0 'Holds record of search
       ' ________________________________________________________
       '/Return Remarks to BAS Code                              \
        do until eof(#f10)
            line input #f10,xx$
            Q=instr(xx$,": REMARK="): if Q=0 then Q=instr(xx$," REMARK=")
            '____________________________________________________________
            if Q>0 then
                do until Q=0 'error exit loop
            '___________Remark_Record_Found______________________________
                    S=Q: Q=0 'start of remark ref
                    R=instr(xx$,"=",S)+1 'start of ref number
                    if R=0 then exit do '---------------->
                    E=R+Place 'end of ref#
                    '__GET_REF_NUMBER_____________
                    Namey$=TRIM$(mid$(xx$,R,Place))
                    Y1$=Left$(xx$,S-1) 'left side of line
                    Y3$=mid$(xx$,S)    'eliminated right side of line
                    Y2$=Search.For.Ref$(Namey$,LastRecord)
                    if len(Y2$)>0 then
                        xx$=Y1$+Y2$
                        RemarkFound=RemarkFound+1
                    else
                        RemarkMissed=RemarkMissed+1
                    end if
                 loop
            end if
            '____________________________________________________________

            print #f11,xx$
        loop
       '\_As_Action_Code_ends_with_Remark_so_does_search_of_line_/
    ' _________________
    '/Close OPEN Files \
     close #f10
     close #f11
    '\_________________/
     if RemarkMissed>0 then print "Remarks Missed=";RemarkMissed
     Ln=Ln+4
     call logit "Remarks Missed=";RemarkMissed
     call logit "Remarks Found=";RemarkFound
     Ln=Ln-8

end sub

