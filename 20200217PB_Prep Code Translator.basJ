'[code Descriptive Outline]
'02040608101214161820222426283032343638404244464850525456586062646668707274767880
' Note: Front is Western Courier New regular 10
'       Using Under Score _ try to keep CODE Lines under 80. This allows other
'       reference window; [AA_Convert_PB-JB.log.TXT]; to be used while Coding.

' PB Syntax JB Fix: INSTR(string1, string2[, starting])
'  ___________________________________________________________________________
' /                                                                           \
'| PB to JB TRANSLATION_AID.BAS                                                |
'| 1. Hugh Polley   2020/02/04                                                 |
'|                                                                             |
'| This code is to be considered "public domain".' Feel free to do what you    |
'| want with it. If you come with an improvement please post it here so all    |
'| Basic users get the benefit.                                                |
'| If you make changes to the CODE add your name and date to above listing!    |
'|                                                                             |
'| Disclaimer:                                                                 |
'| This code is provided as-is and it does not have any warranty of any kind.  |
'| User is responsible for any misuse of the code. Do not use this code in     |
'| whole or in part if you can not accept these terms!                         |
' \___________________________________________________________________________/
'
'  ___________________________________________________________________________
' /                                                                           \
'|Purpose: Translation Code Outline for Power Basic BAS files to Just Basic    |
'|    or: Translation Code Outline for Power Basic BAS files to Python Basic   |
' \___________________________________________________________________________/
'
'  ___________________________________________________________________________
' /                                                                           \
'|       MY PAST TRANSLATE PROGRAMS HAD ONE OR MORE OF THESE METHODS           |
'| NOTE: To Accomplish (1-12) run program again as required after each Step    |
'|01. Set [InFile$=PB_file] with (.BAS)] extension                             |
'|02. Allow Program to Create a [!CONTROL] and a [!CONVERT] sub directory!     |
'|03. Place a copy of the [InFile$ .BAS] Program code in [!CONVERT] directory  |
'|04. Program will create an Execution LOG File in CONVERT [AA_PB->JB.log.TXT  |
'|05. Program Creates [AB-Scaned-Code.txt] for last update to converted File!  |
'|    NOTE: control what is executed by deleting records from bottom to top!   |
'|06. Remove LABELS <??##?:> and change to [??##?] Save to Labels.txt          |
'|    At same time GOSUB and GOTO branches are repaired
'|07. Remove Remarks by replacing them with [:REMARK=#####] TO SPELLremarks.TXT|
'|08. Remove Quotes by replacing them with [Quote$(#####)] to SPELLquotes.TXT  |
'|09. To aid in searching for Power Basic Functions and Commands Colins and    |
'|    operators are SPACED! change [?:?] to [? : ?], [?,?] to [? , ?] etc      |
'|10. To Aid in testing of Code changes, Create REM quote + [Space] at the     |
'|    start of each line and a [Space] + REM Quote at end of each line         |
'|11. For each Syntax Change Have Scaned$ = Fixed$, Fixed$=new fix             |
'|    [OPEN Fixed$ FOR OUTPUT] and [OPEN Scaned$ FOR INPUT]                    |
'|12. Highlight lines which need Manual Fix with [< line >]                    |
'|13. For PYTHON Highlight GOTO and Line they branch to with the same Number   |
'|     <## ?? ?> Most can be fixed with DO-LOOP or/and IF-THEN-ELSE and/or     |
'|    CALL or RETURN Subroutine                                                |
'|=============================================================================|
'|Note: back when computer memory was a problem I did [10-12] with READ and    |
'|   DATA statements. Line Numbers and GOTO, GOSUB also required a rework      |
'|exp. Change required GOTO,GOSUB [###], statements that have a value greater  |
'|    than zero! exp. VAL("100") > 0 so change to VAL("z100") = 0  GOSUB 100   |
'|    becomes GOSUB z100                                                       |
' \___________________________________________________________________________/
'
on error goto [ErrorHandler]
GLOBAL InFile$,CONTROL$,CONVERT$,Fixed$,Scaned$,L,f1,f2,SUBOFF,Skip
GLOBAL Structure, Syntax, Found
'_________________________________
[NAME.of.BAS.file.TO.be.CONVERTED]
' _____________________________________________________________________
'/                                                                     \
    InFile$="PB_Lotto_Pool.BAS"   '<Place nane of file to be Converted> |
'\_____________________________________________________________________/

Skip=0: Found=0 'recording how many procedures
'______________________________________________________________________________|
[OUTPUTsettingsFORfilesANDlines] Skip=0
Err$="[OUTPUTsettingsFORfilesANDlines]<"+str$(Skip)+">"
Err0$=Err$
    CONTROL$="!CONTROL\"
    CONVERT$="!CONVERT\"
    L=1 : f1=1: f2=2: f5=5: f6=6: f7=7
    CLS: print Err$
    print "< In Translation Code, is [InFile$="+InFile$+"] Correct? >"
    input "If Yes, HIT ENTER, else Close Window!";X$
'______________________________________________________________________________|
[DOESsubdiectory!CONTROLexist] Skip=Skip+1
Err$="[DOESsubdiectory!CONTROLexist]<"+str$(Skip)+">"
Err1$=Err$
print Err$
    result = mkdir( "!CONTROL")
    if result <> 0 then
        print "|_____________________________________|"
        print "| [!CONTROL] directory EXISTS !       |"
        print "| Working Directory for .temp Files!  |"
        print "|-------------------------------------|"
    else
        print "|_____________________________________|"
        print "| [!CONTROL] directory CREATED!       |"
        print "| Working Directory for temp Results! |"
        print "|-------------------------------------|"
        print
        Err$= " {{RUN JB Program Again! }}"
        goto [ErrorHandler]
    end if

'______________________________________________________________________________|
[DOESsubdirectory!CONVERTexist] Skip=Skip+1
Err$="[DOESsubdirectory!CONVERTexist]<"+str$(Skip)+">"
Err2$=Err$
print Err$
    result = mkdir( "!CONVERT")
    if result <> 0 then
        print "|_________________________________________________|"
        print "| [!CONVERT] directory EXISTS!                    |"
        print "| Working Directory for Translation Files !       |"
        print "|-------------------------------------------------|"
        print "<PLACE [";InFile$;"] into [!CONVERT] DIRECTORY!>"
        print "|_________________________________________________|"
        print
    else
        print "|_________________________________________________|"
        print "| [!CONVERT] directory CREATED!                   |"
        print "| Working Directory for Translation Files !       |"
        print "| Place ?InFile?.BAS into Directory               |"
        print "|-------------------------------------------------|"
        print "<PLACE [";InFile$;"] into [!CONVERT] DIRECTORY!>"
        print "|_________________________________________________|"
        print
        Err$=" {{ RUN JB Program Again! }}"
        goto [ErrorHandler]
    end if
'______________________________________________________________________________|
[CLEARandCREATElogfile]  Skip=Skip+1
Err$="[CLEARandCREATElogfile]<"+str$(Skip)+">"
    ' ___________________________________________________
    '/Create procedure Log File                          \
    open CONVERT$+"AA_PB to JB.log.TXT" for output as #f1
    '\___________________________________________________/
        PRINT #f1,"<"+InFile$+">"
        print #f1,"    M "+Err0$
        print #f1,"    M "+Err1$
        print #f1,"    M "+Err2$
    close #f1
    '\___________________________________________________/
    L=4: call logit "M "+Err$ 'Line Indent
    print Err$
'______________________________________________________________________________|
[in!CONVERTfindLAST.bas] Skip=Skip+1
Err$="[in!CONVERTfindLAST.bas]<"+str$(Skip)+">"
call logit "M "+Err$
print Err$
    dim info$(100,100) '100 is probably excessive but round
    files DefaultDir$+"\!CONVERT", "*.BAS", info$()
    if val(info$(0,0))=0 then 'a string specifying the qty of files found
        Err$="<"+Err$+" <Empty!>>"
        call logit Err$
        print Err$
        print "|_________________________________________________|"
        print "| [!CONVERT] directory EXISTS!                    |"
        print "| In Program's Code is <InFile$> set to <??.BAS>  |"
        print "|-------------------------------------------------|"
        print "<PLACE [";InFile$;"] into [!CONVERT] DIRECTORY!>"
        Err$="{{ RUN JB Program Again! }}"
        goto [ErrorHandler]
    end if
'______________________________________________________________________________|
[CHECKforLASTcompletedCODEscan] Skip=Skip+1
Err$="[CHECKforLASTcompletedCODEscan]<"+str$(Skip)+">"
call logit "M "+Err$
    ' ____________________________________________________________
    '/Translated Just Basic Code Files                            \
    open CONVERT$+"AB-Scaned-Code.txt" for append as #f2: close #f2
    open CONVERT$+"AB-Scaned-Code.txt" for input as #f2
    '\____________________________________________________________/
        Found=0'number of files found used to avoid translating more than needed
        Fixed$="" 'will hold last record in file for procedure Found>skip?
        '____________________________________________________________
        do until eof(#f2)
            input #f2,X$ 
            if len(trim$(X$))>0 then Fixed$=X$: Found=Found+1
        loop
        '-----------------------------------------------------------
     close #f2
     '\___________________________________________________________/
    if len(trim$(Fixed$))=0 then
        open CONVERT$+"AB-Scaned-Code.txt" for output as #f2
            print #f2,InFile$ 
        close #f2
        Err$="<PLACED [";InFile$;"] into [AB-Scaned-Code.txt]!>"
        print Err$
        Err$="{{ RUN JB Program Again! }}"
        goto [ErrorHandler]
    else
        print Err$+"<# Files Found=";Found;">"
    end if
' _____________________________________________________________________________
'/From this point on Found is used to pass over already completed changes Skip!\
'|At this point in Code Skip is = 0, Mess with above Code at your own Risk!     |
Skip=0: print "Decreasing number for each adjustment < -- >"
'\_____________________________________________________________________________/
'______________________________________________________________________________|
[REPAIRlabelsFROMcolinTObracket] Skip=Skip+1
Err$="[REPAIRlabelsFROMcolinTObracket]<"+Str$(Found-Skip)+">"
call logit "M "+Err$
    print Err$
    If Found>Skip then 'this procedure already completed
        GOTO [REMOVEremarksTOspell] 'skip to next Task
    end if

    ' __________________________________________
    '/Construct Settings                        \
        SUBOFF=0 'turn off log repeats
        Fixed$=InFile$+".01Labels.basJ"
        Scaned$=InFile$+".TEMP.basJ"
    '\__________________________________________/
    ' _____________________________________________
    '/                                             \
      open CONVERT$+"ZZ_Labels.TXT" for OUTPUT as #21
      open CONTROL$+Scaned$ for OUTPUT as #11 'temperary code hold
      open CONVERT$+InFile$ for INPUT as #10 'raw power basic file
    '\_____________________________________________/
      ' ____________________
      '/                    \
        do until EOF(#10)
            line input #10, xx$
            '-------------------------------
            if left$(trim$(xx$),1)="'" then
                print #11,xx$
                goto [do1again] 'should be new if but I have many bad habits
            end if              'GOTO is one
            '-------------------------------
            Colin=INSTR(xx$,":")
            '-------------------
            if Colin=0 then
                print #11,xx$
                goto [do1again]
            end if
            '-------------------
            Z=Colin 'found
            InQuote=InsideQuotes(xx$,Z) 'byref xx$: unclosed quotes closed
            '------------------------------------------------------------
            if InQuote=0 then 'colin not inside a Quote
                '=====================
                for X=1 to Colin
                    yy$=mid$(xx$,X,1)
                    Y=asc(upper$(yy$)) 'for purpose of test
                    Z=(Y>64 and Y<91) or (Y>47 and Y<59) or Y=95'underscore
                    if Z=0 then exit for
                next X
                '=====================
                If X>Colin then 'Label found
                    yy$=left$(xx$,Colin-1)
                    xx$=mid$(xx$,Colin+1)
                    print #21,trim$(yy$)
                    print #11,Space$(1)+yy$+space$(2)+xx$ 'surround with spaces for search
                else
                    print #11,xx$

                end if
                '----------------------
             else
                  print #11,xx$ 
             end if
             '-----------------------------------------------------------
        [do1again] 'replaces nested If ENDif
        loop
      '\___________________/
    ' __________
    '/          \
      close #10
      close #11
      close #21
    '\__________/
'______________________________________________________________________________|
[FIXfoundLABELSandCOLIN] L=L+4 'no skip as second part of procedure
Err$="[REPAIRlabelsFROMcolinTObracket]<"+Str$(Skip)+">"
call logit "M "+Err$: L=L-4
' ____________________________________________
'/Open Temp Repaired File and Continue Repairs\
 open CONVERT$+Fixed$ for OUTPUT as #11
 open CONTROL$+Scaned$ for INPUT as #10
'\____________________________________________/
  ' ____________________________________________
  '/Seperate and Store Remarks                  \
    do until EOF(#10)
        line input #10, xx$
       ' ___________________________________________
       '/Test for remark inside Quotes              \
        yy0$="":yy1$="":yy2$="":Q=1
        do until Q=0 'seperate out remark
            Q=INSTR(xx$,"'",Q) 'position of Quote
            '------------------------------------
            if Q>0 then 'is Rem inside Quote
                InQuote=InsideQuotes(xx$,Q) 'byref xx$ unclosed quotes closed
                '=======================
                if InQuote>Q then
                    Q=InQuote
                else
                    yy0$=mid$(xx$,Q)
                    xx$=left$(xx$,Q-1)
                    exit do
                end if
                '=======================
            end if
            '------------------------------------
        loop
       '\___________________________________________/
        ' ______________________________________
        '/colin add Spaces to each side of Colin\
        Z=1: do until Z=0
            '-------------------------------------
            Z=INSTR(xx$,":",Z) 'position of Colin
            if Z>0 then 'Does Colin needs repair?
                InQuote=InsideQuotes(xx$,Z) 'byref xx$ unclosed quotes closed
                '====================================
                if InQuote>Z then
                    Z=InQuote 'continue with check
                else
                    '================================
                    if mid$(xx$,Z-1,1)=space$(1) then
                        yy1$=left$(xx$,Z-2)
                    else
                        yy1$=left$(xx$,Z-1)
                    end if
                    '================================
                    if mid$(xx$,Z+1,1)=space$(1) then
                        yy2$=mid$(xx$,Z+2)
                    else
                        yy2$=mid$(xx$,Z+1)
                    end if
                    '================================
                    yy1$=yy1$+" : "
                    xx$=yy1$+yy2$
                    Z=len(yy1$)
                end if
                '=====================================
            end if
            '--------------------------------------
        loop
       '\________________________________________/
       ' ___________________________________
       '/Load check and repair branch labels\
        open CONVERT$+"ZZ_Labels.TXT" for INPUT as #20
       '\___________________________________/
           ' _______________________________
           '/                               \
            DO UNTIL eof(#20)
                INPUT #20,Label$: Z=1: Label$=trim$(Label$)
                Label$=space$(1)+Label$
                Z=1:tt$=xx$+space$(1)
               ' ________________________
               '/                        \
                do until Z=0
                    Z=INSTR(tt$,Label$,Z)
                    '----------------------------------------------
                    IF Z>0 THEN
                        E=Z+len(Label$) 'check for whole label word
                        '================================
                        if mid$(tt$,E,1)<>space$(1) then
                            Z=E 'label part of a word
                        else

                            yy$="["+trim$(Label$)+"]"+space$(1)
                            yy1$=(left$(tt$,Z))
                            yy2$=mid$(tt$,E)
                            xx$=yy1$+yy$+yy2$
                            Z=E
                       end if
                       '==================================
                    end if
                    '--------------------------------------------
                LOOP
               '\________________________/
            loop
            '\_______________________________/
       ' ___________
       '/           \
        close #20
       '\___________/

        if len(yy0$)>0 then xx$=xx$+yy0$
        print #11,xx$

    loop
   '\_______________________/

' ______________________
'/                      \
 close #10
 close #11
'\______________________/
Err$="{{ RUN JB Program Again! }}"

' __________________________________________________
'/Save to Scanned Controlling Text File             \
   call Record.Repaired.Code
'\__________________________________________________/

goto [ErrorHandler] 'each repair requires rerun in case some Manual repair wanted
'______________________________________________________________________________|
[REMOVEremarksTOspell] Skip=Skip+1
Err$="[REMOVEremarksTOspell]<"+str$(Found-Skip)+">"
call logit "M "+Err$
If Found>Skip then
    print Err$
    GOTO [REMOVEquotesTOspell] 'skip to
end if
print Err$
    ' _________________________________________
    '/SETUP Variables                          \
        SUBOFF=0
        REMARK=0
        Scaned$=Fixed$
        Fixed$=InFile$+".02Remark.basJ"
    '\_________________________________________/
    ' ______________________________________________________
    '/OPEN Files for input and Output                       \
        open CONVERT$+"YY_Spell Edit Remarks.TXT" for OUTPUT as #20
        open CONVERT$+Fixed$ for OUTPUT as #11
        open CONVERT$+Scaned$ for INPUT as #10
    '\______________________________________________________/
   ' ________________
   '/                \
    do until EOF(#10)
        line input #10, xx$
        REMARK=REMARK+1: Remarkit$="000000"+str$(REMARK)
        Remarkit$=right$(Remarkit$,5)
        '----------------------------------------------
        if left$(trim$(xx$),1)="'" then 'line Remark found
            print #20, Remarkit$+space$(2)+trim$(xx$)
            print #11," REMARK="+Remarkit$
        else
            Z=1: Quote$=""
           ' ____________
           '/            \
            do until Z=0
                Z = INSTR(xx$,"'",Z)
                '----------------
                if Z=0 then
                    print #11,xx$ 
                    exit do '----------->
                end if
                '-----------------
                InQuote=InsideQuotes(xx$,Z) 'byref xx$ unclosed quotes closed
                '----------------------------------------
                if InQuote>Z then 'REM inside a quote
                    Z=InQuote '-------------------------------->
                else 'store Remark
                    yy$=trim$(mid$(xx$,Z))
                    xx$=Left$(xx$,Z-1)
                    print #20, Remarkit$+space$(2)+trim$(yy$)
                    print #11,xx$+" : REMARK="+Remarkit$
                    exit do '---------------------------------->
                end if
            loop
            '\____________/

        end if
        '---------------------------------------------------
    loop
   '\________________/
   ' _________________
   '/Close OPEN Files \
        close #11
        close #10
        close #20
   '\________________/

 'goto [ErrorHandler] 'here
' __________________________________________________
'/Save to Controlling Text File                     \
   call Record.Repaired.Code
'\__________________________________________________/

    Err$="{{ RUN JB Program Again! }}"
goto [ErrorHandler]

'______________________________________________________________________________|
[REMOVEquotesTOspell]  Skip=Skip+1
Err$="[REMOVEquotesTOspell]<"+str$(Found-Skip)+">"
If Found>Skip then
    print Err$
    GOTO [SPACEitFORsearches] 'skip to
end if
print Err$
    ' _________________________________________
    '/SETUP Variables                          \
        SUBOFF=0
        Quote=0
        Quote$="Quote$(??)"
        Scaned$=Fixed$
        Fixed$=InFile$+".03Quote.basJ"
    '\_________________________________________/
   ' ______________________________________________________
    '/OPEN Files for input and Output                       \
        open CONVERT$+"XX_Spell Edit Quotes.TXT" for OUTPUT as #20
        open CONVERT$+Fixed$ for OUTPUT as #11
        open CONVERT$+Scaned$ for INPUT as #10
    '\______________________________________________________/
   ' ________________
   '/                \
    Quote=0
    do until EOF(#10)
        line input #10, xx$
        '----------------------------------------------
        if left$(trim$(xx$),1)="'" then 'line Remark found
            print #11,xx$
        else
           ' ________________
           '/                \
            Z=1: do until Z=0
                Z = INSTR(xx$,chr$(34),Z) 'find quote
                '----------------
                if Z=0 then
                    print #11,xx$ 
                    exit do '----------->
                end if
                Start=Z: Z=Z+1
                if ASC(mid$(xx$,Z,1))=34 then
                    Z=Z+1 'Double Quote ignore
                else
                    'position after Quote in xx$
                    '-----------------
                    InQuote=InsideQuotes(xx$,Z) 'byref xx$ unclosed quotes closed
                    '----------------------------------------
                    if InQuote>Z then 'Second Quote Found
                        Last=InQuote-1
                        Z=InQuote 'continue quote line check
                        y1$=Left$(xx$,Start-1)
                        y2$=mid$(xx$,Start+1,Last-Start-1)
                        y3$=trim$(mid$(xx$,Last+1))
                        yy$=y2$
                        Quote=Quote+1: Quote$="000000"+str$(Quote)
                        Quote$=right$(Quote$,5)
                        y2$="Quote$("+str$(Quote)+") "
                        '-----------------------------------------
                        xx$=y1$+y2$: Z=len(xx$)+1 'Z reset to new val
                        '------------------------------------------
                        xx$=xx$+y3$
                        print #20,Quote$+space$(2)+trim$(yy$)
                        '-------------------------------->
                    else 'Code Problem?
                        cls
                        print "'here2"
                        print xx$
                        print InQuote,Z,mid$(xx$,Z,1)
                        print
                        input "hit";T$
                        call logit "ERROR Quote? "+xx$
                        print #11,"[ERRORquote]"+xx$
                        Z=0
                    end if
                end if

            loop
            '\____________/

        end if
        '---------------------------------------------------
    loop
   '\________________/
   ' _________________
   '/Close OPEN Files \
        close #11
        close #10
        close #20
   '\________________/

' __________________________________________________
'/Save to Controlling Text File                     \
    call Record.Repaired.Code
'\__________________________________________________/

  Err$="{{ RUN JB Program Again! }}"

goto [ErrorHandler]
'______________________________________________________________________________|
[SPACEitFORsearches] Skip=Skip+1
Err$="[SPACEitFORsearches] "+str$(Found-Skip)
call logit "M "+Err$
If Found>Skip then
    print Err$
    GOTO [PREtranslatorOUTPUTcompleted]
end if
print Err$
    '_______________________________________
    Scaned$=Fixed$
    Fixed$=InFile$+".04Spaced.basJ"
    '=======================================
   ' _______________________________________
   '/OPEN Files for input and Output        \
    open CONVERT$+Fixed$ for OUTPUT as #11
    open CONVERT$+Scaned$ for INPUT as #10
   '\________________________________________/
   ' ___________________________________________________________
   '/Space it Out Data: any operator or divider you can think of\
     data "OR","AND","'",",","(",")","=","*","-","+","^","#","end"
   '\__________________________________________________________/
   ' __________________________________________________________
   '/Check and space repair each line PB Code xx$ Line         \
    do until EOF(#10)
        line input #10,xx$
       ' _________________________________
       '/ Check for Data Items in the Line\
        do
            read Item$: if Item$="end" then exit do
           ' _____________________________________
           '/Do loop: Check and Repair Found Items\
            Z=1: do until Z=0
                '---------------------
                Z = INSTR(xx$,Item$,Z) 'check for item
                '---------------------
                if Z<>0 then                    'item found?
                    y2$=trim$(mid$(xx$,Z+1))    'right side of line whole trim
                    y1$=Rtrim$(Left$(xx$,Z-1))  'left side of line part trim
                    if Item$ ="#" then
                        Item$=space$(1)+Item$
                    else
                        Item$=space$(1)+Item$+space$(1)
                    end if
                    Z=len(y1$)  'reset Z for continuing line search
                    xx$=y1$+y2$ 'repair line with space seperators
                end if
                '----------------------
            loop 'line for each occurance of item
           '\_____________________________________/
        loop until Item$ = "end"
       '\_________________________________/

       print #11,"' "+Rtrim$(xx$)+" '"
       restore' Item Data List '-------------------------------->
    loop 'for each PB code line
   '\___________________________________________________________/
   ' _________________
   '/Close OPEN Files \
        close #11
        close #10
   '\________________/
' __________________________________________________
'/Save to Controlling Text File                     \
    call Record.Repaired.Code
'\__________________________________________________/
 Err$="{{ RUN JB Program Again! }}"

'___________________________________________________
goto [ErrorHandler]
'===================================================
' ______________________________________________________
'/END OF REQUIRED OPERATIONS, REST OF TRANSLATIONS CAN  \
'|BE FOR EITHER PYTHON OR JUST BASIC, DO NOT RUN AS EXE |
'|IT IS CONSTRUCTED TO FIX CODE PROBLEMs AS ENCOUNTERED |
'|NEXT LOAD [B TranslatePB-jb.basJ] to Continue making  |
'|changes to the PB code. It will use AB_Scaned-Code.txt|
'|to capture the PB File Name.                          |
'========================================================
'______________________________________________________________________________|
[PREtranslatorOUTPUTcompleted] 'final run will have Found>Skip
print "  __________________________________________________  "
print " / Preparation for Translating Code Complete!       \ "
print "| TO CONTINUE TRANSLATING in JUST BASIC or PYTHON    |"
print "| LOAD: [PB_Syntax Code Translator] INTO JB EDITOR!  |"
print "| RUN and and Adjust or Add to JB Code as needed!    |"
print " \__________________________________________________/ "

'____________________________________________________________________
[ErrorHandler] 'notify of errors and output programs progress
'DO NOT PLACE ANY SUB OR FUNCTION CALLS HERE!
'===================================================
    print
    print "''Message''or''Last Executed''''"
    if Err$<>"" then print "{"+Err$+"}"
    if Err>0 then print "Error number is {";Err;"}"
    print "''''''''''''''''''''''''''''''''"
    print
    if Found>Skip then
        L=1: call logit "M [END OF PROGRAM EXECUTION]"
        print "Program has finished preparing for Rotating File Repairs!"
        print "{LOAD: <PB_Syntax Code Translator>"
        print "THE END"
    end if
    '3 RETURN without GOSUB
    '4 Read past end of data
    '8 Branch label not found
    '9 Subscript out of range
    '11 Division by zero
    '53 OS Error: The system cannot find the file specified.
    '58 OS Error: Cannot create a file when that file already exists.
    '55 Error opening file
    '52 Bad file handle
    '62 Input past end of file
end

'=================================================
'__________________________________________________
sub Record.Repaired.Code 'Fixed,CONVERT$ are Global
' __________________________________________________
'/Save to Controlling Text File                     \
open CONVERT$+"AB-Scaned-Code.txt" for append as #f2
    print #f2,Fixed$
close #f2
'\__________________________________________________/
end sub
'__________________________
[LOGtoCONTROLprocessedFILE]
sub logit itlog$
    open CONVERT$+"AA_PB to JB.log.TXT" for APPEND as #f1
        print #f1,SPACE$(L)+itlog$
    close #f1
end sub
'_______________________
FUNCTION Ltrim$(String$)
    do
        if trim$(String$)="" then String$="": exit do
        If left$(String$,1)=space$(1) then String$=mid$(String$,2) else exit do
    loop until String$=Trim$(String$)
    Ltrim$=String$
end function
'_______________________
FUNCTION Rtrim$(String$)
    do
        if trim$(String$)="" then String$="": exit do
        If Right$(String$,1)=space$(1) then
            String$=mid$(String$,1,len(String$)-1)
        else
            exit do
        end if
    loop until String$=Trim$(String$)
    Rtrim$=String$
end function

FUNCTION InsideQuotes(byref xx$,Z) 'closes open quotes
IF SUBOFF=0 THEN
L=L+4: call logit "F InsideQuotes( xx$,Z) [test position in xx$])": L=L-4
SUBOFF=1
END IF
     IF  Z = 0 THEN EXIT FUNCTION
      Y = 1 :  X = 1
     DO UNTIL  Y = 0
          Y = INSTR(xx$,CHR$(34), X)
         IF  Y > 0 THEN 'first quote found
              X =  Y + 1
              W = INSTR(xx$,CHR$(34), X)
             IF  W > 0 THEN 'closing quote found
                  X =  W + 1
                 IF  Z >  Y AND  Z <  W THEN 'return next position outside of quotes
                     InsideQuotes =  X
                     EXIT FUNCTION
                 END IF
             else 'closing Quote not found add Quote
                xx$= xx$+CHR$(34)
                 Y = 1: X = 1
             END IF
         END IF
     LOOP
END FUNCTION

function RemoveLines$ (test$)
        while Remove$<>"End"
            read Remove$
            Z=instr(test$,Remove$)
            if Z>0 then  'un-needed line found
                open CONVERT$+InFile$+".LinesRemoved.basJ" for append as #12
                    print #12,test$
                close #12
                test$=""
                EXIT WHILE
            end if
        wend
        RemoveLines$=test$

[DATArestore]
    restore
    DATA " #CONSOLE ON "," #COMPILE EXE "," #REGISTER "," #DEBUG ERR "
    DATA " DEFLNG "," MACRO CONST ","End"

end function


